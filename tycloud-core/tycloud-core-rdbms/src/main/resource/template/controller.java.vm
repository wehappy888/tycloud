package org.tycloud.api.tiku.controller.${package.ModuleName};

import com.baomidou.mybatisplus.plugins.Page;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import org.tycloud.api.wheatwave.face.${package.ModuleName}.model.${entity}Model;
import org.tycloud.api.wheatwave.face.${package.ModuleName}.service.${table.serviceName};
import org.tycloud.core.foundation.context.RequestContext;
import org.tycloud.core.foundation.utils.StringUtil;
import org.tycloud.core.restful.doc.TycloudOperation;
import org.tycloud.core.restful.doc.TycloudResource;
import org.tycloud.core.restful.utils.APILevel;
import org.tycloud.core.restful.utils.ResponseHelper;
import org.tycloud.core.restful.utils.ResponseModel;

import java.util.Date;
import java.util.List;

/**
 * <p>
 * ${table.comment} 前端控制器
 * </p>
 *
 * @author 子杨
 * @since ${date}
 */

@RestController
@TycloudResource(module = "${package.ModuleName}",value = "${table.entityPath}")
@RequestMapping(value = "/v1/${package.ModuleName}/${entity}")
@Api(value = "${package.ModuleName}-${table.comment}")


#if(${superControllerClass})
public class ${table.controllerName} extends ${superControllerClass} {
#else
public class ${table.controllerName} {
#end


        private final Logger logger = Logger.getLogger(${table.controllerName}.class);

    @Autowired
    ${table.serviceName}  simpleService;



    /**
     * 新增
     * @param model
     * @return
     * @throws Exception
     */
    @TycloudOperation( ApiLevel = APILevel.SUPERADMIN)
    @ApiOperation(value="创建")
    @RequestMapping(value = "", method = RequestMethod.POST)
    public ResponseModel<${entity}Model> create(@RequestBody ${entity}Model model) throws Exception
        {
            model = simpleService.create${entity}(model);
            return ResponseHelper.buildRespons(model);
        }


    /**
    * 更新机构
    * @param model
    * @param sequenceNbr
    * @return 更新后对象
    * @throws Exception
    */
    @TycloudOperation( ApiLevel = APILevel.SUPERADMIN)
    @ApiOperation(value="更新")
    @RequestMapping(value = "/{sequenceNbr}", method = RequestMethod.PUT)
    public ResponseModel<${entity}Model> update(@RequestBody ${entity}Model model,@PathVariable(value="sequenceNbr") String sequenceNbr) throws Exception {
            model.setequenceNbr(sequenceNbr);
            return ResponseHelper.buildRespons(simpleService.update${entity}(model));
        }







    /**
    * 根据id 获取机构信息
    * @param sequenceNBR
    * @return
    * @throws Exception
    */
    @TycloudOperation( ApiLevel = APILevel.SUPERADMIN)
    @ApiOperation(value="查询单个对象")
    @RequestMapping(value = "/{sequenceNbr}", method = RequestMethod.GET)
    public ResponseModel<${entity}Model> seleteOne( @PathVariable String sequenceNbr) throws Exception
        {
            return ResponseHelper.buildRespons(Bean.toModel(simpleService.queryById(sequenceNbr),new ${entity}Model()));
        }


    @TycloudOperation( ApiLevel = APILevel.SUPERADMIN)
    @ApiOperation(value="删除")
    @RequestMapping(value = "/{ids}", method = RequestMethod.DELETE)
    public ResponseModel<String> deleteMenu(@PathVariable String ids) throws Exception
        {
            String [] deleteIds = StringUtil.string2Array(ids);
            return ResponseHelper.buildRespons(simpleService.deleteMult${entity}(deleteIds));
        }



        @TycloudOperation( ApiLevel = APILevel.SUPERADMIN)
        @ApiOperation(value = "分页查询")
        @RequestMapping(value = "/page", method = RequestMethod.GET)
        public ResponseModel<Page> queryForPage(
                            @RequestParam(value ="agencyCode") String  agencyCode,
                            @RequestParam(value ="current") int current,
                            @RequestParam(value = "size") int size) throws Exception
        {
            Page page = new Page();
            page.setCurrent(current);
            page.setSize(size);
            return ResponseHelper.buildRespons(simpleService.queryFor${entity}Page(page,agencyCode));
        }


        @TycloudOperation( ApiLevel = APILevel.SUPERADMIN)
        @ApiOperation(value = "列表查询")
        @RequestMapping(value = "/list", method = RequestMethod.GET)
        public ResponseModel selectForList(@RequestParam(value ="agencyCode") String  agencyCode) throws Exception
        {
            return ResponseHelper.buildRespons(simpleService.queryFor${entity}List(agencyCode));
        }












	
}
